@model Models.Category

@{
    ViewBag.Title = "Catalog";
    Layout = "_Layout";
}

<div class="row">
    <div class="col-2 filters-block">
        <div class="row">
            <p class="fs-4">
                Specifications
            </p>
        </div>
        <div class="row">
            @foreach (var specification in Model.Specifications)
            {
                @await Html.PartialAsync("SpecificationFilterPartial", specification)
            }
        </div>
    </div>
    <div class="col-10 content-block">
        <div class="row search-sort-block">
            <form class="d-flex col-10">
                <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
                <button class="btn btn-outline-dark search-btn" type="submit">Search</button>
            </form>
            
            <div class="dropdown col-2">
                <button class="btn dropdown-toggle sort-btn" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                    Sort
                </button>
                <ul class="dropdown-menu sort-menu" aria-labelledby="dropdownMenuButton1">
                    <li><a sortOption="cheapFirst" class="dropdown-item" href="#">Cheap first</a></li>
                    <li><a sortOption="expensiveFirst" class="dropdown-item" href="#">Expensive first</a></li>
                    <li><a sortOption="alphabet" class="dropdown-item" href="#">By alphabet</a></li>
                </ul>
            </div>
        </div>
        <div id="products" class="row">
            @foreach (var product in Model.Products)
            {
                @await Html.PartialAsync("ProductPreviewPartial", product)
            }
        </div>
    </div>
</div>

<script>
let optionIds = new Set();
let sortOption = "";

let params = window
    .location
    .search
    .replace('?','')
    .split('&')
    .reduce(
        function(p, e){
            let a = e.split('=');
            p[decodeURIComponent(a[0])] = decodeURIComponent(a[1]);
            return p;
        },
        {}
    );

function toString(set) {
    let result = '';
    let isFirst = true;
    
    for (let e of set){
        if (isFirst)
            isFirst = false;
        else
            result += ','
        result += e;
    }
    return result;
}

function sendRequest() {
    $('#products').load("@Url.Action("GetProducts")?" + 
                "sortOption="+ sortOption + 
                "&category=" + params['name'] + 
                "&ids=" + toString(optionIds));     
}

window.onload = function () {
    let sortOptions = document.getElementsByClassName('dropdown-item');
    for (let i = 0; i < sortOptions.length; i++ )
        sortOptions[i].addEventListener('click', function (){
            sortOption = sortOptions[i].getAttribute('sortOption');
            sendRequest();
        });
    
    let checkboxes = document.getElementsByClassName('filter');
    for (let i = 0; i < checkboxes.length; i++)  
        checkboxes[i].addEventListener('click', function (){
            if (checkboxes[i].checked)
                optionIds.add(checkboxes[i].getAttribute('id'));
            else
                optionIds.delete(checkboxes[i].getAttribute('id'));
            sendRequest();
        });
}
</script>